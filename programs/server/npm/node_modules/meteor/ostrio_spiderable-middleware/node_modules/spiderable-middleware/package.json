{
  "_args": [
    [
      {
        "raw": "spiderable-middleware@1.2.2",
        "scope": null,
        "escapedName": "spiderable-middleware",
        "name": "spiderable-middleware",
        "rawSpec": "1.2.2",
        "spec": "1.2.2",
        "type": "version"
      },
      "/Users/drdimitru/Sites/npm-spiderable-middleware/.npm/package-new-1ne8dwh"
    ]
  ],
  "_from": "spiderable-middleware@1.2.2",
  "_id": "spiderable-middleware@1.2.2",
  "_inCache": true,
  "_location": "/spiderable-middleware",
  "_nodeVersion": "4.8.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/spiderable-middleware-1.2.2.tgz_1507958318337_0.200979333370924"
  },
  "_npmUser": {
    "name": "dr.dimitru",
    "email": "ceo@veliov.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "spiderable-middleware@1.2.2",
    "scope": null,
    "escapedName": "spiderable-middleware",
    "name": "spiderable-middleware",
    "rawSpec": "1.2.2",
    "spec": "1.2.2",
    "type": "version"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/spiderable-middleware/-/spiderable-middleware-1.2.2.tgz",
  "_shasum": "aa8b18306454d6ae051c44d4f45a390c1a1d65ac",
  "_shrinkwrap": null,
  "_spec": "spiderable-middleware@1.2.2",
  "_where": "/Users/drdimitru/Sites/npm-spiderable-middleware/.npm/package-new-1ne8dwh",
  "author": {
    "name": "Dmitriy A.",
    "url": "https://veliovgroup.com"
  },
  "bugs": {
    "url": "https://github.com/VeliovGroup/spiderable-middleware/issues"
  },
  "dependencies": {
    "request": "^2.83.0"
  },
  "description": "Allow your JavaScript website to be crawled perfectly by search engines.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "aa8b18306454d6ae051c44d4f45a390c1a1d65ac",
    "tarball": "https://registry.npmjs.org/spiderable-middleware/-/spiderable-middleware-1.2.2.tgz"
  },
  "gitHead": "1bfd8ff1ea7eadd12765e12a144898d56af6f6f6",
  "homepage": "https://github.com/VeliovGroup/spiderable-middleware",
  "keywords": [
    "_escaped_fragment_",
    "crawl",
    "SEO",
    "middleware",
    "spiderable",
    "crawlble",
    "prerender",
    "prerendering",
    "ajax",
    "seo",
    "angular",
    "backbone",
    "emberjs",
    "meteor",
    "meteorjs",
    "express",
    "connect",
    "http",
    "https",
    "ostr.io"
  ],
  "license": "BSD-3-Clause",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "dr.dimitru",
      "email": "ceo@veliov.com"
    }
  ],
  "name": "spiderable-middleware",
  "optionalDependencies": {},
  "readme": "Spiderable middleware\n=======\nGoogle, Facebook, Twitter, Yahoo, and Bing and all other crawlers and search engines are constantly trying to view your website. If your website is built on top of the JavaScript framework like, but not limited to - Angular, Backbone, Ember, Meteor, React, MEAN most of the front-end solutions returns basic HTML-markup and script-tags to crawlers, but not content of your page. The mission of `spiderable-middleware` and [ostr.io](https://ostr.io) are to boost your SEO experience without a headache.\n\n\nAbout Package\n=======\nThis package acts as middleware and intercepts requests to your Node.js application from web crawlers. All requests proxy passed to the Spiderable (Prerender) Service, which returns static, rendered HTML.\n\n__Note__: *This package proxies real HTTP headers and response code, to reduce overwhelming requests, try to avoid HTTP-redirect headers, like* `Location` *and others. Read how to [return genuine status code](https://github.com/VeliovGroup/spiderable-middleware#return-genuine-status-code) and [handle JS-redirects](https://github.com/VeliovGroup/spiderable-middleware#javascript-redirects).*\n\nThis middleware was tested and works like a charm with:\n - [meteor](https://www.meteor.com/): [example](https://github.com/VeliovGroup/spiderable-middleware/blob/master/examples/meteor.middleware.js)\n - [express](https://www.npmjs.com/package/express): [example](https://github.com/VeliovGroup/spiderable-middleware/blob/master/examples/express.middleware.js)\n - [connect](https://www.npmjs.com/package/connect): [example](https://github.com/VeliovGroup/spiderable-middleware/blob/master/examples/connect.middleware.js)\n - [vanilla http(s) server](https://nodejs.org/api/http.html): [example](https://github.com/VeliovGroup/spiderable-middleware/blob/master/examples/http.middleware.js)\n - See [all examples](https://github.com/VeliovGroup/spiderable-middleware/tree/master/examples)\n\nAll other frameworks which follow Node's middleware convention - will work too.\n\nThis package was originally developed for [ostr.io](https://ostr.io) service. But it's not limited to, and can proxy-pass requests to any other rendering-endpoint.\n\nToC\n=======\n - [Installation](https://github.com/VeliovGroup/spiderable-middleware#installation)\n - [Basic usage](https://github.com/VeliovGroup/spiderable-middleware#basic-usage)\n - [MeteorJS usage](https://github.com/VeliovGroup/spiderable-middleware#meteor-specific-usage)\n - [Return genuine status code](https://github.com/VeliovGroup/spiderable-middleware#return-genuine-status-code)\n - [Speed-up rendering](https://github.com/VeliovGroup/spiderable-middleware#speed-up-rendering)\n - [JavaScript redirects](https://github.com/VeliovGroup/spiderable-middleware#javascript-redirects)\n - [API](https://github.com/VeliovGroup/spiderable-middleware#api)\n   - [Constructor](https://github.com/VeliovGroup/spiderable-middleware#constructor-new-spiderableopts)\n   - [Middleware](https://github.com/VeliovGroup/spiderable-middleware#spiderablehandlerreq-res-next)\n\nInstallation\n=======\nNPM:\n```shell\nnpm install spiderable-middleware\n```\n\nMeteor:\n```shell\nmeteor add webapp\nmeteor add ostrio:spiderable-middleware\n```\n\nBasic usage\n=======\nSee [all examples](https://github.com/VeliovGroup/spiderable-middleware/tree/master/examples).\n\nFirst, add `fragment` meta-tag to your HTML template:\n```html\n<html>\n  <head>\n    <meta name=\"fragment\" content=\"!\">\n    <!-- ... -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>\n```\n\n```js\nconst express    = require('express');\nconst app        = express();\nconst Spiderable = require('spiderable-middleware');\nconst spiderable = new Spiderable({\n  rootURL: 'http://example.com',\n  serviceURL: 'https://render.ostr.io',\n  auth: 'APIUser:APIPass'\n});\n\napp.use(spiderable.handler).get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(3000);\n```\n\nMeteor specific usage\n=======\n```js\n// meteor add webapp\n// meteor add ostrio:spiderable-middleware\n\nimport Spiderable from 'meteor/ostrio:spiderable-middleware';\n\nWebApp.connectHandlers.use(new Spiderable({\n  rootURL: 'http://example.com',\n  serviceURL: 'https://render.ostr.io',\n  auth: 'APIUser:APIPass'\n}));\n```\n\nReturn genuine status code\n=======\nTo pass expected response code from front-end JavaScript framework to browser/crawlers, you need to create specially formatted HTML-comment. This comment can be placed in any part of HTML-page. `head` or `body` tag is the best place for it.\n\nFormat (html):\n```html\n<!-- response:status-code=404 -->\n```\n\nFormat (jade):\n```jade\n// response:status-code=404\n```\n\nThis package support all standard and custom status codes:\n - `201` - `<!-- response:status-code=201 -->`\n - `401` - `<!-- response:status-code=401 -->`\n - `403` - `<!-- response:status-code=403 -->`\n - `499` - `<!-- response:status-code=499 -->` (*non-standard*)\n - `500` - `<!-- response:status-code=500 -->`\n - `514` - `<!-- response:status-code=514 -->` (*non-standard*)\n\n__Note__: *Reserved status codes for internal service communications:* `49[0-9]`.\n\nSpeed-up rendering\n=======\nTo speed-up rendering, you __should__ tell to the Spiderable engine when your page is ready. Set `window.IS_RENDERED` to `false`, and once your page is ready set this variable to `true`. Example:\n\n```html\n<html>\n  <head>\n    <meta name=\"fragment\" content=\"!\">\n    <script>\n      window.IS_RENDERED = false;\n    </script>\n  </head>\n  <body>\n    <!-- ... -->\n    <script type=\"text/javascript\">\n      //Somewhere deep in your app-code:\n      window.IS_RENDERED = true;\n    </script>\n  </body>\n</html>\n```\n\nJavaScript redirects\n=======\nIf you need to redirect browser/crawler inside your application, while a page is loading (*imitate navigation*), you're free to use any of classic JS-redirects as well as your framework's navigation, or `History.pushState()`\n```js\nwindow.location.href = 'http://example.com/another/page';\nwindow.location.replace('http://example.com/another/page');\n\nRouter.go('/another/page'); // framework's navigation\n```\n__Note__: *Only 4 redirects are allowed during one request after 4 redirects session will be terminated.*\n\n\nAPI\n=======\n\n##### *Constructor* `new Spiderable([opts])`\n\n - `opts` {*Object*} - Configuration options\n - `opts.serviceURL` {*String*} - Valid URL to Spiderable endpoint (local or foreign). Default: `https://render.ostr.io`. Can be set via environment variables: `SPIDERABLE_SERVICE_URL` or `PRERENDER_SERVICE_URL`\n - `opts.rootURL` {*String*} - Valid root URL of your website. Can be set via an environment variable: `ROOT_URL` (*common for meteor*)\n - `opts.auth` {*String*} - [Optional] Auth string in next format: `user:pass`. Can be set via an environment variables: `SPIDERABLE_SERVICE_AUTH` or `PRERENDER_SERVICE_AUTH`. Default `null`\n - `opts.bots` {*[String]*} - [Optional] An array of strings (case insensitive) with additional User-Agent names of crawlers you would like to intercept. See default [bot's names](https://github.com/VeliovGroup/spiderable-middleware/blob/master/lib/index.js#L93)\n - `opts.ignore` {*[String]*} - [Optional] An array of strings (case __sensitive__) with ignored routes. Note: it's based on first match, so route `/users` will cause ignoring of `/part/users/part`, `/users/_id` and `/list/of/users`, but not `/user/_id` or `/list/of/blocked-users`. Default `null`\n\n```js\n// CommonJS\n// const Spiderable = require('spiderable-middleware');\n\n// Meteor.js\n// import Spiderable from 'meteor/ostrio:spiderable-middleware';\n\nconst spiderable = new Spiderable({\n  rootURL: 'http://example.com',\n  serviceURL: 'https://render.ostr.io',\n  auth: 'APIUser:APIPass'\n});\n```\n\n##### `spiderable.handler(req, res, next)`\n*Middleware handler. Alias:* `spiderable.handle`.\n```js\n// Express, Connect:\napp.use(spiderable.handler);\n\n// Meteor:\nWebApp.connectHandlers.use(spiderable);\n\n//HTTP(s) Server\nhttp.createServer((req, res) => {\n  spiderable.handler(req, res, () => {\n    // Callback, triggered if this request\n    // is not a subject of spiderable prerendering\n    res.writeHead(200, {'Content-Type': 'text/plain; charset=UTF-8'});\n    res.end(\"Hello vanilla NodeJS!\");\n    // Or do something else ...\n  });\n}).listen(3000);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/VeliovGroup/spiderable-middleware.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.2.2"
}
