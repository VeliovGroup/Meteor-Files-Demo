{"version":3,"sources":["meteor://ðŸ’»app/packages/staringatlights:inject-data/lib/namespace.js","meteor://ðŸ’»app/packages/staringatlights:inject-data/lib/utils.js","meteor://ðŸ’»app/packages/staringatlights:inject-data/lib/server.js"],"names":["module","export","InjectData","Package","EJSON","watch","require","v","encode","_encode","ejson","ejsonString","stringify","encodeURIComponent","decode","_decode","encodedEjson","decodedEjsonString","decodeURIComponent","parse","_","Meteor","WebApp","WebAppInternals","Random","Env","EnvironmentVariable","injectToHead","registerBoilerplateDataCallback","req","data","arch","headers","_injectPayload","disableInjection","payload","dynamicHead","dynamicBody","pushData","key","value","getData","clone"],"mappings":"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","file":"/packages/staringatlights_inject-data.js","sourcesContent":["/* global Package */\nexport const InjectData = {}\n\n// Replace meteorhacks:inject-data with our new API, this is for compatibility\n// with third party packages that still depend upon the meteorhacks version.\nif (Package['meteorhacks:inject-data']) {\n\tPackage['meteorhacks:inject-data'].InjectData = InjectData\n}\n","import { EJSON } from 'meteor/ejson'\nimport { InjectData } from './namespace'\n\n/**\n * Returns an encoded string that represents an object.\n * @param {object} ejson\n */\nInjectData.encode = InjectData._encode = function(ejson) {\n\tvar ejsonString = EJSON.stringify(ejson)\n\treturn encodeURIComponent(ejsonString)\n}\n\n/**\n * Decodes an encoded string into an object.\n * @param {string} encodedEjson\n */\nInjectData.decode = InjectData._decode = function(encodedEjson) {\n\tvar decodedEjsonString = decodeURIComponent(encodedEjson)\n\tif (!decodedEjsonString) return null\n\n\treturn EJSON.parse(decodedEjsonString)\n}\n","import { _ } from 'meteor/underscore'\nimport { Meteor } from 'meteor/meteor'\nimport { InjectData } from './namespace'\nimport { WebApp, WebAppInternals } from 'meteor/webapp'\nimport { Random } from 'meteor/random'\n\nconst Env = new Meteor.EnvironmentVariable()\n\n// Supports legacy uses of inject data, SSR users should turn this to false\nInjectData.injectToHead = true\n\nWebAppInternals.registerBoilerplateDataCallback(\n\t'inject-data',\n\t(req, data, arch) => {\n\t\tif (\n\t\t\treq &&\n\t\t\treq.headers &&\n\t\t\treq.headers._injectPayload &&\n\t\t\t!InjectData.disableInjection\n\t\t) {\n\t\t\tconst payload = `<script type=\"text/inject-data\">${InjectData.encode(\n\t\t\t\treq.headers._injectPayload\n\t\t\t)}</script>`\n\n\t\t\tif (InjectData.injectToHead) {\n\t\t\t\tif (!data.dynamicHead) {\n\t\t\t\t\tdata.dynamicHead = ''\n\t\t\t\t}\n\t\t\t\tdata.dynamicHead += payload\n\t\t\t} else {\n\t\t\t\tif (!data.dynamicBody) {\n\t\t\t\t\tdata.dynamicBody = ''\n\t\t\t\t}\n\t\t\t\tdata.dynamicBody += payload\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n)\n\n/**\n * Pushes data into the InjectData payload.\n * @param {object} node request object\n * @param {string} key\n * @param {*} value\n */\nInjectData.pushData = function pushData(req, key, value) {\n\tif (!req.headers) {\n\t\treq.headers = {}\n\t}\n\tif (!req.headers._injectPayload) {\n\t\treq.headers._injectPayload = {}\n\t}\n\n\treq.headers._injectPayload[key] = value\n}\n\n/**\n * Returns the object associated with the specified key.\n * @param {string} key\n */\nInjectData.getData = function getData(req, key) {\n\tif (req.headers._injectPayload) {\n\t\treturn _.clone(req.headers._injectPayload[key])\n\t} else {\n\t\treturn null\n\t}\n}\n"]}