{"version":3,"sources":["meteor://ðŸ’»app/lib/files.collection.coffee"],"names":[],"mappings":"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","file":"/lib/files.collection.coffee.js","sourcesContent":["# DropBox usage:\n# Read: https://github.com/VeliovGroup/Meteor-Files/wiki/Third-party-storage\nuseDropBox = false\nif Meteor.isServer\n  if process.env?.DROPBOX\n    Meteor.settings.dropbox = JSON.parse(process.env.DROPBOX)?.dropbox\n\n  if Meteor.settings.dropbox and Meteor.settings.dropbox.key and Meteor.settings.dropbox.secret and Meteor.settings.dropbox.token\n    useDropBox = true\n    Dropbox    = Npm.require 'dropbox'\n    fs         = Npm.require 'fs'\n    bound      = Meteor.bindEnvironment (callback) -> return callback()\n    client     = new (Dropbox.Client)({\n      key: Meteor.settings.dropbox.key\n      secret: Meteor.settings.dropbox.secret\n      token: Meteor.settings.dropbox.token\n    })\n\nCollections.files = new FilesCollection\n  debug:            false\n  throttle:         false\n  chunkSize:        1024*1024\n  storagePath:      'assets/app/uploads/uploadedFiles'\n  collectionName:   'uploadedFiles'\n  allowClientCode:  false\n  onBeforeUpload:   -> if @file.size <= 1024 * 1024 * 128 then true else \"Max. file size is 128MB you've tried to upload #{filesize(@file.size)}\"\n  downloadCallback: (fileObj) -> \n    if @params?.query.download is 'true'\n      Collections.files.collection.update fileObj._id, $inc: 'meta.downloads': 1\n    return true\n  interceptDownload: (http, fileRef, version) ->\n    if useDropBox\n      path = fileRef?.versions?[version]?.meta?.pipeFrom\n      if path\n        # If file is moved to DropBox\n        # We will redirect browser to DropBox\n        http.response.writeHead 302, 'Location': path\n        http.response.end()\n        return true\n      else\n        # While file is not yet uploaded to DropBox\n        # We will serve file from FS\n        return false\n    else\n      return false\n\nif Meteor.isServer\n  Collections.files.denyClient()\n  Collections.files.collection.attachSchema Collections.files.schema\n\n  Collections.files.on 'afterUpload', (fileRef) ->\n    if useDropBox\n      sendToDB = (fileRef) ->\n        _.each fileRef.versions, (vRef, version) ->\n          fs.readFile vRef.path, (error, data) -> bound ->\n            if error\n              console.error error\n            else\n              # Write file to DropBox\n              client.writeFile \"#{fileRef._id}-#{version}.#{fileRef.extension}\", data, (error, stat) -> bound ->\n                if error\n                  console.error error\n                else\n                  # Generate downloadable link\n                  client.makeUrl stat.path, {long: true, downloadHack: true}, (error, xml) -> bound ->\n                    # Store downloadable in file's meta object\n                    upd = $set: {}\n                    upd['$set'][\"versions.#{version}.meta.pipeFrom\"] = xml.url\n                    upd['$set'][\"versions.#{version}.meta.pipePath\"] = stat.path\n                    Collections.files.collection.update {_id: fileRef._id}, upd, (error) ->\n                      if error\n                        console.error error\n                      return\n                    return\n                return\n            return\n          return\n        Collections.files.unlink fileRef\n        return\n\n    Meteor.setTimeout ->\n      if !!~fileRef.type.indexOf 'image'\n        _app.createThumbnails Collections.files, fileRef, (fileRef) ->\n          if useDropBox\n            sendToDB Collections.files.collection.findOne fileRef._id\n          return\n      else\n        if useDropBox\n          sendToDB fileRef\n      return\n    , 1024\n\n  # This line now commented due to Heroku usage\n  # Collections.files.collection._ensureIndex {'meta.expireAt': 1}, {expireAfterSeconds: 0, background: true}\n\n  # DropBox usage:\n  if useDropBox\n    # Intercept File's collection remove method\n    # to remove file from DropBox\n    _origRemove = Collections.files.remove\n    Collections.files.remove = (search) ->\n      cursor = @collection.find search\n      cursor.forEach (fileRef) ->\n        if fileRef?.meta?.pipePath\n          client.remove fileRef.meta.pipePath, (error) ->\n            if error\n              console.error error\n            return\n      # Call original method\n      _origRemove.call @, search\n\n  # Remove all files on server load/reload, useful while testing/development\n  # Meteor.startup -> Collections.files.remove {}\n\n  # Remove files along with MongoDB records two minutes before expiration date\n  # If we have 'expireAfterSeconds' index on 'meta.expireAt' field,\n  # it won't remove files themselves.\n  Meteor.setInterval ->\n    Collections.files.remove {'meta.expireAt': $lte: new Date((+new Date) + 120000)}, _app.NOOP\n  ,\n    120000\n\n  Meteor.publish 'latest', (take = 50)->\n    check take, Number\n    Collections.files.collection.find {}\n    ,\n      limit: take\n      sort: 'meta.created_at': -1\n      fields:\n        _id: 1\n        name: 1\n        size: 1\n        meta: 1\n        isText: 1\n        isJSON: 1\n        isVideo: 1\n        isAudio: 1\n        isImage: 1\n        extension: 1\n        _collectionName: 1\n        _downloadRoute: 1\n\n  Meteor.publish 'file', (_id)->\n    check _id, String\n    Collections.files.collection.find _id\n\n  Meteor.methods\n    'filesLenght': -> Collections.files.collection.find({}).count()"]}