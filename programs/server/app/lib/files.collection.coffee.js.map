{"version":3,"sources":["meteor://ðŸ’»app/lib/files.collection.coffee"],"names":[],"mappings":"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","file":"/lib/files.collection.coffee.js","sourcesContent":["# DropBox usage:\n# Read: https://github.com/VeliovGroup/Meteor-Files/wiki/Third-party-storage\nuseDropBox = false\nif Meteor.isServer\n  if process.env?.DROPBOX\n    Meteor.settings.dropbox = JSON.parse(process.env.DROPBOX)?.dropbox\n\n  if Meteor.settings.dropbox and Meteor.settings.dropbox.key and Meteor.settings.dropbox.secret and Meteor.settings.dropbox.token\n    useDropBox = true\n    Dropbox    = Npm.require 'dropbox'\n    fs         = Npm.require 'fs'\n    bound      = Meteor.bindEnvironment (callback) -> return callback()\n    client     = new (Dropbox.Client)({\n      key: Meteor.settings.dropbox.key\n      secret: Meteor.settings.dropbox.secret\n      token: Meteor.settings.dropbox.token\n    })\n\nCollections.files = new FilesCollection\n  debug:            false\n  throttle:         false\n  chunkSize:        1024*1024\n  storagePath:      'assets/app/uploads/uploadedFiles'\n  collectionName:   'uploadedFiles'\n  allowClientCode:  false\n  onBeforeUpload:   ->\n    return if @file.size <= 1024 * 1024 * 128 then true else \"Max. file size is 128MB you've tried to upload #{filesize(@file.size)}\"\n  downloadCallback: (fileObj) -> \n    if @params?.query.download is 'true'\n      Collections.files.collection.update fileObj._id, $inc: 'meta.downloads': 1\n    return true\n  interceptDownload: (http, fileRef, version) ->\n    if useDropBox\n      path = fileRef?.versions?[version]?.meta?.pipeFrom\n      if path\n        # If file is moved to DropBox\n        # We will redirect browser to DropBox\n        http.response.writeHead 302, 'Location': path\n        http.response.end()\n        return true\n      else\n        # While file is not yet uploaded to DropBox\n        # We will serve file from FS\n        return false\n    else\n      return false\n\nif Meteor.isServer\n  Collections.files.denyClient()\n  Collections.files.collection.attachSchema Collections.files.schema\n\n  Collections.files.on 'afterUpload', (fileRef) ->\n    if useDropBox\n      makeUrl = (stat, fileRef, version, triesUrl = 0) ->\n        client.makeUrl stat.path, {long: true, downloadHack: true}, (error, xml) -> bound ->\n          # Store downloadable in file's meta object\n          if error\n            if triesUrl < 10\n              Meteor.setTimeout ->\n                makeUrl stat, fileRef, version, ++triesUrl\n              , 2048\n            else\n              console.error error, {triesUrl}\n          else if xml\n            upd = $set: {}\n            upd['$set'][\"versions.#{version}.meta.pipeFrom\"] = xml.url\n            upd['$set'][\"versions.#{version}.meta.pipePath\"] = stat.path\n            Collections.files.collection.update {_id: fileRef._id}, upd, (error) ->\n              if error\n                console.error error\n              else\n                Collections.files.unlink Collections.files.collection.findOne(fileRef._id), version\n              return\n          else\n            if triesUrl < 10\n              Meteor.setTimeout ->\n                makeUrl stat, fileRef, version, ++triesUrl\n              , 2048\n            else\n              console.error \"client.makeUrl doesn't returns xml\", {triesUrl}\n          return\n        return\n\n      writeToDB = (fileRef, version, data, triesSend = 0) ->\n        client.writeFile \"#{fileRef._id}-#{version}.#{fileRef.extension}\", data, (error, stat) -> bound ->\n          if error\n            if triesSend < 10\n              Meteor.setTimeout ->\n                writeToDB fileRef, version, data, ++triesSend\n              , 2048\n            else\n              console.error error, {triesSend}\n          else\n            # Generate downloadable link\n            makeUrl stat, fileRef, version\n          return\n        return\n\n      readFile = (fileRef, vRef, version, triesRead = 0) ->\n        fs.readFile vRef.path, (error, data) -> bound ->\n          if error\n            if triesRead < 10\n              readFile fileRef, vRef, version, ++triesRead\n            else\n              console.error error\n          else\n            # Write file to DropBox\n            writeToDB fileRef, version, data\n          return\n        return\n\n      sendToDB = (fileRef) ->\n        _.each fileRef.versions, (vRef, version) ->\n          readFile fileRef, vRef, version\n          return\n        return\n\n    if !!~fileRef.type.indexOf 'image'\n      _app.createThumbnails Collections.files, fileRef, (fileRef) ->\n        if useDropBox\n          sendToDB Collections.files.collection.findOne fileRef._id\n        return\n    else\n      if useDropBox\n        sendToDB fileRef\n    return\n\n  # This line now commented due to Heroku usage\n  # Collections.files.collection._ensureIndex {'meta.expireAt': 1}, {expireAfterSeconds: 0, background: true}\n\n  # DropBox usage:\n  if useDropBox\n    # Intercept File's collection remove method\n    # to remove file from DropBox\n    _origRemove = Collections.files.remove\n    Collections.files.remove = (search) ->\n      cursor = @collection.find search\n      cursor.forEach (fileRef) ->\n        if fileRef?.meta?.pipePath\n          client.remove fileRef.meta.pipePath, (error) ->\n            if error\n              console.error error\n            return\n      # Call original method\n      _origRemove.call @, search\n\n  # Remove all files on server load/reload, useful while testing/development\n  # Meteor.startup -> Collections.files.remove {}\n\n  # Remove files along with MongoDB records two minutes before expiration date\n  # If we have 'expireAfterSeconds' index on 'meta.expireAt' field,\n  # it won't remove files themselves.\n  Meteor.setInterval ->\n    Collections.files.remove {'meta.expireAt': $lte: new Date((+new Date) + 120000)}, _app.NOOP\n    return\n  ,\n    120000\n\n  Meteor.publish 'latest', (take = 50)->\n    check take, Number\n    return Collections.files.collection.find {\n      $or: [\n        {'meta.blamed': $lt: 3},\n        {'meta.blamed': $exists: false}\n      ]\n    }, {\n      limit: take\n      sort: 'meta.created_at': -1\n      fields:\n        _id: 1\n        name: 1\n        size: 1\n        meta: 1\n        isText: 1\n        isJSON: 1\n        isVideo: 1\n        isAudio: 1\n        isImage: 1\n        'versions.thumbnail40.path': 1\n        extension: 1\n        _collectionName: 1\n        _downloadRoute: 1\n    }\n\n  Meteor.publish 'file', (_id)->\n    check _id, String\n    return Collections.files.collection.find _id\n\n  Meteor.methods\n    filesLenght: ->\n      return Collections.files.collection.find({\n        $or: [\n          {'meta.blamed': $lt: 3},\n          {'meta.blamed': $exists: false}\n        ]\n      }).count()\n\n    unblame: (_id) ->\n      check _id, String\n      Collections.files.collection.update {_id}, {$inc: 'meta.blamed': -1}, _app.NOOP\n      return true\n\n    blame: (_id) ->\n      check _id, String\n      Collections.files.collection.update {_id}, {$inc: 'meta.blamed': 1}, _app.NOOP\n      return true"]}