{"version":3,"sources":["meteor://ðŸ’»app/lib/files.collection.coffee"],"names":[],"mappings":"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","file":"/lib/files.collection.coffee.js","sourcesContent":["# DropBox usage:\n# Read: https://github.com/VeliovGroup/Meteor-Files/wiki/DropBox-Integration\n# env.var example: DROPBOX='{\"dropbox\":{\"key\": \"xxx\", \"secret\": \"xxx\", \"token\": \"xxx\"}}'\nuseDropBox = false\n\n# AWS:S3 usage:\n# Read: https://github.com/Lepozepo/S3#create-your-amazon-s3\n# Read: https://github.com/VeliovGroup/Meteor-Files/wiki/AWS-S3-Integration\n# Create and attach CloudFront to S3 bucket: https://console.aws.amazon.com/cloudfront/\n\n# env.var example: S3='{\"s3\":{\"key\": \"xxx\", \"secret\": \"xxx\", \"bucket\": \"xxx\", \"region\": \"xxx\", \"cfdomain\": \"https://xxx.cloudfront.net\"}}'\nuseS3 = false\n\nif Meteor.isServer\n  if process.env?.DROPBOX\n    Meteor.settings.dropbox = JSON.parse(process.env.DROPBOX)?.dropbox\n  else if process.env?.S3\n    Meteor.settings.s3 = JSON.parse(process.env.S3)?.s3\n\n  if Meteor.settings.dropbox and Meteor.settings.dropbox.key and Meteor.settings.dropbox.secret and Meteor.settings.dropbox.token\n    useDropBox = true\n    Dropbox    = Npm.require 'dropbox'\n    Request    = Npm.require 'request'\n    fs         = Npm.require 'fs'\n    bound      = Meteor.bindEnvironment (callback) -> return callback()\n    client     = new (Dropbox.Client)({\n      key: Meteor.settings.dropbox.key\n      secret: Meteor.settings.dropbox.secret\n      token: Meteor.settings.dropbox.token\n    })\n  else if Meteor.settings.s3 and Meteor.settings.s3.key and Meteor.settings.s3.secret and Meteor.settings.s3.bucket and Meteor.settings.s3.region and Meteor.settings.s3.cfdomain\n    \n    # Fix CloudFront certificate issue\n    # Read: https://github.com/chilts/awssum/issues/164\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0\n\n    useS3   = true\n    knox    = Npm.require 'knox'\n    Request = Npm.require 'request'\n    bound   = Meteor.bindEnvironment (callback) -> return callback()\n    client  = knox.createClient\n      key: Meteor.settings.s3.key\n      secret: Meteor.settings.s3.secret\n      bucket: Meteor.settings.s3.bucket\n      region: Meteor.settings.s3.region\n\n    # Normalize cfdomain\n    Meteor.settings.s3.cfdomain = Meteor.settings.s3.cfdomain.replace /\\/+$/, ''\n\nCollections.files = new FilesCollection\n  debug:            false\n  throttle:         false\n  chunkSize:        1024*1024\n  storagePath:      'assets/app/uploads/uploadedFiles'\n  collectionName:   'uploadedFiles'\n  allowClientCode:  true\n  protected: (fileObj) ->\n    if not fileObj.meta?.secured\n      return true\n    else if fileObj.meta?.secured and @userId is fileObj.userId\n      return true\n    return false\n  onBeforeRemove: (cursor) ->\n    self = @\n    res  = cursor.map (file) ->\n      return file?.userId is self.userId\n    return !~res.indexOf false\n  onBeforeUpload: ->\n    return if @file.size <= 1024 * 1024 * 128 then true else \"Max. file size is 128MB you've tried to upload #{filesize(@file.size)}\"\n  downloadCallback: (fileObj) ->\n    if @params?.query.download is 'true'\n      Collections.files.collection.update fileObj._id, $inc: 'meta.downloads': 1\n    return true\n  interceptDownload: (http, fileRef, version) ->\n    if useDropBox or useS3\n      path = fileRef?.versions?[version]?.meta?.pipeFrom\n      if path\n        # If file is successfully moved to Storage\n        # We will pipe request to Storage\n        # So, original link will stay always secure\n\n        # To force ?play and ?download parameters\n        # and to keep original file name, content-type,\n        # content-disposition and cache-control\n        # we're using low-level .serve() method\n        @serve http,\n          fileRef,\n          fileRef.versions[version],\n          version,\n          Request\n            url: path\n            headers: _.pick http.request.headers, 'range', 'accept-language', 'accept', 'cache-control', 'pragma', 'connection', 'upgrade-insecure-requests', 'user-agent'\n        return true\n      else\n        # While file is not yet uploaded to Storage\n        # We will serve file from FS\n        return false\n    else\n      return false\n\nif Meteor.isServer\n  Collections.files.denyClient()\n  Collections.files.collection.attachSchema Collections.files.schema\n\n  Collections.files.on 'afterUpload', (fileRef) ->\n    self = @\n    if useDropBox\n      makeUrl = (stat, fileRef, version, triesUrl = 0) ->\n        client.makeUrl stat.path, {long: true, downloadHack: true}, (error, xml) -> bound ->\n          # Store downloadable link in file's meta object\n          if error\n            if triesUrl < 10\n              Meteor.setTimeout ->\n                makeUrl stat, fileRef, version, ++triesUrl\n                return\n              , 2048\n            else\n              console.error error, {triesUrl}\n          else if xml\n            upd = $set: {}\n            upd['$set'][\"versions.#{version}.meta.pipeFrom\"] = xml.url\n            upd['$set'][\"versions.#{version}.meta.pipePath\"] = stat.path\n            self.collection.update {_id: fileRef._id}, upd, (error) ->\n              if error\n                console.error error\n              else\n                # Unlink original files from FS\n                # after successful upload to DropBox\n                self.unlink self.collection.findOne(fileRef._id), version\n              return\n          else\n            if triesUrl < 10\n              Meteor.setTimeout ->\n                makeUrl stat, fileRef, version, ++triesUrl\n                return\n              , 2048\n            else\n              console.error \"client.makeUrl doesn't returns xml\", {triesUrl}\n          return\n        return\n\n      writeToDB = (fileRef, version, data, triesSend = 0) ->\n        # DropBox already uses random URLs\n        # No need to use random file names\n        client.writeFile \"#{fileRef._id}-#{version}.#{fileRef.extension}\", data, (error, stat) -> bound ->\n          if error\n            if triesSend < 10\n              Meteor.setTimeout ->\n                writeToDB fileRef, version, data, ++triesSend\n                return\n              , 2048\n            else\n              console.error error, {triesSend}\n          else\n            # Generate downloadable link\n            makeUrl stat, fileRef, version\n          return\n        return\n\n      readFile = (fileRef, vRef, version, triesRead = 0) ->\n        fs.readFile vRef.path, (error, data) -> bound ->\n          if error\n            if triesRead < 10\n              readFile fileRef, vRef, version, ++triesRead\n            else\n              console.error error\n          else\n            # Write file to DropBox\n            writeToDB fileRef, version, data\n          return\n        return\n\n      sendToStorage = (fileRef) ->\n        _.each fileRef.versions, (vRef, version) ->\n          readFile fileRef, vRef, version\n          return\n        return\n\n    else if useS3\n      sendToStorage = (fileRef) ->\n        _.each fileRef.versions, (vRef, version) ->\n          # We use Random.id() instead of real file's _id \n          # to secure files from reverse engineering\n          # As after viewing this code it will be easy\n          # to get access to unlisted and protected files\n          filePath = \"files/#{Random.id()}-#{version}.#{fileRef.extension}\"\n          client.putFile vRef.path, filePath, (error, res) -> bound ->\n            if error\n              console.error error\n            else\n              upd = $set: {}\n              upd['$set'][\"versions.#{version}.meta.pipeFrom\"] = Meteor.settings.s3.cfdomain + '/' + filePath\n              upd['$set'][\"versions.#{version}.meta.pipePath\"] = filePath\n              self.collection.update {_id: fileRef._id}, upd, (error) ->\n                if error\n                  console.error error\n                else\n                  # Unlink original files from FS\n                  # after successful upload to AWS:S3\n                  self.unlink self.collection.findOne(fileRef._id), version\n                return\n            return\n          return\n        return\n\n    if !!~['png', 'jpg', 'jpeg'].indexOf (fileRef.extension or '').toLowerCase()\n      _app.createThumbnails self, fileRef, (fileRef) ->\n        if useDropBox or useS3\n          sendToStorage self.collection.findOne fileRef._id\n        return\n    else\n      if useDropBox or useS3\n        sendToStorage fileRef\n    return\n\n  # This line now commented due to Heroku usage\n  # Collections.files.collection._ensureIndex {'meta.expireAt': 1}, {expireAfterSeconds: 0, background: true}\n\n  # Intercept FileCollection's remove method\n  # to remove file from DropBox or AWS S3\n  if useDropBox or useS3\n    _origRemove = Collections.files.remove\n    Collections.files.remove = (search) ->\n      cursor = @collection.find search\n      cursor.forEach (fileRef) ->\n        _.each fileRef.versions, (vRef, version) ->\n          if vRef?.meta?.pipePath\n            if useDropBox\n              # DropBox usage:\n              client.remove vRef.meta.pipePath, (error) -> bound ->\n                if error\n                  console.error error\n                return\n            else\n              # AWS:S3 usage:\n              client.deleteFile vRef.meta.pipePath, (error) -> bound ->\n                if error\n                  console.error error\n                return\n          return\n        return\n      # Call original method\n      _origRemove.call @, search\n      return\n\n  # Remove all files on server load/reload, useful while testing/development\n  # Meteor.startup -> Collections.files.remove {}\n\n  # Remove files along with MongoDB records two minutes before expiration date\n  # If we have 'expireAfterSeconds' index on 'meta.expireAt' field,\n  # it won't remove files themselves.\n  Meteor.setInterval ->\n    Collections.files.remove {'meta.expireAt': $lte: new Date((+new Date) + 120000)}, _app.NOOP\n    return\n  ,\n    120000\n\n  Meteor.publish 'latest', (take = 10, userOnly = false)->\n    check take, Number\n    check userOnly, Boolean\n    if userOnly and @userId\n      selector = userId: @userId\n    else\n      selector = {\n        $or: [{\n          'meta.unlisted': false\n          'meta.secured': false\n          'meta.blamed': $lt: 3\n        },{\n          userId: @userId\n        }]\n      }\n    return Collections.files.find(selector, {\n      limit: take\n      sort: 'meta.created_at': -1\n      fields:\n        _id: 1\n        name: 1\n        size: 1\n        meta: 1\n        type: 1\n        isPDF: 1\n        isText: 1\n        isJSON: 1\n        isVideo: 1\n        isAudio: 1\n        isImage: 1\n        userId: 1\n        'versions.thumbnail40.type': 1\n        extension: 1\n        _collectionName: 1\n        _downloadRoute: 1\n    }).cursor\n\n  Meteor.publish 'file', (_id)->\n    check _id, String\n    return Collections.files.find({\n        $or: [{\n          _id: _id\n          'meta.secured': false\n        },{\n          _id: _id\n          'meta.secured': true\n          userId: @userId\n        }]\n      }, {\n        fields:\n          _id: 1\n          name: 1\n          size: 1\n          type: 1\n          meta: 1\n          isPDF: 1\n          isText: 1\n          isJSON: 1\n          isVideo: 1\n          isAudio: 1\n          isImage: 1\n          extension: 1\n          _collectionName: 1\n          _downloadRoute: 1\n      }).cursor\n\n  Meteor.methods\n    filesLenght: (userOnly = false) ->\n      check userOnly, Boolean\n      if userOnly and @userId\n        selector = userId: @userId\n      else\n        selector = {\n          $or: [{\n            'meta.unlisted': false\n            'meta.secured': false\n            'meta.blamed': $lt: 3\n          },{\n            userId: @userId\n          }]\n        }\n      return Collections.files.find(selector).count()\n\n    unblame: (_id) ->\n      check _id, String\n      Collections.files.update {_id}, {$inc: 'meta.blamed': -1}, _app.NOOP\n      return true\n\n    blame: (_id) ->\n      check _id, String\n      Collections.files.update {_id}, {$inc: 'meta.blamed': 1}, _app.NOOP\n      return true\n\n    changeAccess: (_id) ->\n      check _id, String\n      if Meteor.userId()\n        file = Collections.files.findOne {_id, userId: Meteor.userId()}\n        if file\n          Collections.files.update _id, {$set: 'meta.unlisted': if file.meta.unlisted then false else true}, _app.NOOP\n          return true\n      throw new Meteor.Error 401, 'Access denied!'\n\n    changePrivacy: (_id) ->\n      check _id, String\n      if Meteor.userId()\n        file = Collections.files.findOne {_id, userId: Meteor.userId()}\n        if file\n          Collections.files.update _id, {$set: 'meta.unlisted': true, 'meta.secured': if file.meta.secured then false else true}, _app.NOOP\n          return true\n      throw new Meteor.Error 401, 'Access denied!'"]}