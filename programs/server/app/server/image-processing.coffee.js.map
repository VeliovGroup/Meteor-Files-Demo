{"version":3,"sources":["meteor://ðŸ’»app/server/image-processing.coffee"],"names":[],"mappings":"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","file":"/server/image-processing.coffee.js","sourcesContent":["bound = Meteor.bindEnvironment (callback) -> return callback()\nfs    = Npm.require 'fs-extra'\n\n_app.createThumbnails = (collection, fileRef, cb) ->\n  check fileRef, Object\n  isLast = false\n\n  finish = (error) -> bound ->\n    if error\n      console.error \"[_app.createThumbnails] [finish]\", error\n    else\n      if isLast\n        cb and cb(fileRef)\n    return true\n\n  fs.exists fileRef.path, (exists) -> bound ->\n    throw Meteor.log.error \"File #{fileRef.path} not found in [createThumbnails] Method\" if not exists\n\n    image = gm(fileRef.path)\n\n    sizes =\n      preview:\n        width: 400\n      thumbnail40:\n        width: 40\n        square: true\n\n    image.size (error, features) -> bound ->\n      throw new Meteor.Error \"[_app.createThumbnails] [_.each sizes]\", error if error\n      i = 0\n\n      collection.collection.update fileRef._id, {\n        $set:\n          'meta.width': features.width\n          'meta.height': features.height\n      }, _app.NOOP\n\n      _.each sizes, (size, name) ->\n        path = \"#{collection.storagePath(fileRef)}/#{name}-#{fileRef._id}.#{fileRef.extension}\"\n\n        copyPaste = ->\n          fs.copy fileRef.path, path, (error) -> bound ->\n            if error\n              console.error \"[_app.createThumbnails] [_.each sizes] [fs.copy]\", error\n            else\n              upd = \n                $set: {}\n              upd['$set']['versions.' + name] = \n                path: path\n                size: fileRef.size\n                type: fileRef.type\n                extension: fileRef.extension\n                meta:\n                  width: features.width\n                  height: features.height\n              collection.collection.update fileRef._id, upd, (error) ->\n                ++i\n                isLast = true if i is Object.keys(sizes).length\n                finish(error)\n            return\n          return\n\n        if !!~['jpg', 'jpeg', 'png'].indexOf fileRef.extension.toLowerCase()\n          img  = gm(fileRef.path).define('filter:support=2').define('jpeg:fancy-upsampling=false').define('jpeg:fancy-upsampling=off').define('png:compression-filter=5').define('png:compression-level=9').define('png:compression-strategy=1').define('png:exclude-chunk=all').noProfile().strip().dither(false).filter('Triangle')\n          updateAndSave = (error) -> bound ->\n            if error\n              console.error \"[_app.createThumbnails] [_.each sizes] [img.resize]\", error\n            else\n              fs.stat path, (err, stat) -> bound ->\n                gm(path).size (error, imgInfo) -> bound ->\n                  if error\n                    console.error \"[_app.createThumbnails] [_.each sizes] [img.resize] [fs.stat] [gm(path).size]\", error\n                  else\n                    upd = $set: {}\n                    upd['$set']['versions.' + name] = \n                      path: path\n                      size: stat.size\n                      type: fileRef.type\n                      extension: fileRef.extension\n                      meta:\n                        width: imgInfo.width\n                        height: imgInfo.height\n                    collection.collection.update fileRef._id, upd, (error) ->\n                      ++i\n                      isLast = true if i is Object.keys(sizes).length\n                      finish(error)\n                  return\n                return\n            return\n\n          if not size.square\n            if features.width > size.width\n              img.resize(size.width).interlace('Line').write path, updateAndSave\n            else\n              copyPaste()\n          else\n            x = 0\n            y = 0\n            widthRatio  = features.width / size.width\n            heightRatio = features.height / size.width\n\n            widthNew    = size.width\n            heightNew   = size.width\n\n            if heightRatio < widthRatio\n              widthNew = (size.width * features.width) / features.height\n              x = (widthNew - size.width) / 2\n\n            if heightRatio > widthRatio\n              heightNew = (size.width * features.height) / features.width\n              y = (heightNew - size.width) / 2\n\n            img.resize(widthNew, heightNew).crop(size.width, size.width, x, y).interlace('Line').write path, updateAndSave\n        else\n          copyPaste()\n        return\n  return true"]}