{"version":3,"sources":["meteor://ðŸ’»app/server/image-processing.coffee"],"names":[],"mappings":"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","file":"/server/image-processing.coffee.js","sourcesContent":["bound = Meteor.bindEnvironment (callback) -> return callback()\nfs    = Npm.require 'fs-extra'\n\n_app.createThumbnails = (collection, fileRef, cb) ->\n  check fileRef, Object\n  isLast = false\n\n  finish = (error) -> bound ->\n    if error\n      console.error \"[_app.createThumbnails] [finish]\", error\n    else\n      if isLast\n        cb and cb(fileRef)\n    return true\n\n  fs.exists fileRef.path, (exists) -> bound ->\n    throw Meteor.log.error \"File #{fileRef.path} not found in [createThumbnails] Method\" if not exists\n\n    image = gm(fileRef.path)\n\n    sizes =\n      preview:\n        width: 640\n      thumbnail40:\n        width: 40\n        square: true\n\n    image.size (error, features) -> bound ->\n      throw new Meteor.Error \"[_app.createThumbnails] [_.each sizes]\", error if error\n      i = 0\n\n      collection.collection.update fileRef._id, {\n        $set:\n          'meta.width': features.width\n          'meta.height': features.height\n      }, _app.NOOP\n\n      _.each sizes, (size, name) ->\n        path = \"#{collection.storagePath}/#{name}-#{fileRef._id}.#{fileRef.extension}\"\n\n        copyPaste = ->\n          fs.copy fileRef.path, path, (error) -> bound ->\n            if error\n              console.error \"[_app.createThumbnails] [_.each sizes] [fs.copy]\", error\n            else\n              upd = \n                $set: {}\n              upd['$set']['versions.' + name] = \n                path: path\n                size: fileRef.size\n                type: fileRef.type\n                extension: fileRef.extension\n                meta:\n                  width: features.width\n                  height: features.height\n              collection.collection.update fileRef._id, upd, (error) ->\n                ++i\n                isLast = true if i is Object.keys(sizes).length\n                finish(error)\n            return\n          return\n\n        if !!~['jpg', 'jpeg', 'png'].indexOf fileRef.extension.toLowerCase()\n          img  = gm(fileRef.path).define('filter:support=2').define('jpeg:fancy-upsampling=false').define('jpeg:fancy-upsampling=off').define('png:compression-filter=5').define('png:compression-level=9').define('png:compression-strategy=1').define('png:exclude-chunk=all').noProfile().strip().dither(false).filter('Triangle')\n          updateAndSave = (error) -> bound ->\n            if error\n              console.error \"[_app.createThumbnails] [_.each sizes] [img.resize]\", error\n            else\n              fs.stat path, (err, stat) -> bound ->\n                gm(path).size (error, imgInfo) -> bound ->\n                  if error\n                    console.error \"[_app.createThumbnails] [_.each sizes] [img.resize] [fs.stat] [gm(path).size]\", error\n                  else\n                    upd = $set: {}\n                    upd['$set']['versions.' + name] = \n                      path: path\n                      size: stat.size\n                      type: fileRef.type\n                      extension: fileRef.extension\n                      meta:\n                        width: imgInfo.width\n                        height: imgInfo.height\n                    collection.collection.update fileRef._id, upd, (error) ->\n                      ++i\n                      isLast = true if i is Object.keys(sizes).length\n                      finish(error)\n                  return\n                return\n            return\n\n          if not size.square\n            if features.width > size.width\n              img.resize(size.width).interlace('Line').write path, updateAndSave\n            else\n              copyPaste()\n          else\n            x = 0\n            y = 0\n            widthRatio  = features.width / size.width\n            heightRatio = features.height / size.width\n\n            widthNew    = size.width\n            heightNew   = size.width\n\n            if heightRatio < widthRatio\n              widthNew = (size.width * features.width) / features.height\n              x = (widthNew - size.width) / 2\n\n            if heightRatio > widthRatio\n              heightNew = (size.width * features.height) / features.width\n              y = (heightNew - size.width) / 2\n\n            img.resize(widthNew, heightNew).crop(size.width, size.width, x, y).interlace('Line').write path, updateAndSave\n        else\n          copyPaste()\n        return\n  return true"]}